<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <configSections>
    <section name="akka" type="Akka.Configuration.Hocon.AkkaConfigurationSection, Akka" />
  </configSections>
  <startup>
    <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.5" />
  </startup>
  <akka>
    <hocon>
      <![CDATA[
          akka {
            extensions = [
              "Akka.Cluster.Tools.PublishSubscribe.DistributedPubSubExtensionProvider, Akka.Cluster.Tools",
              "Akka.DistributedData.DistributedDataProvider, Akka.DistributedData"
            ]
            actor {
              provider = "Akka.Cluster.ClusterActorRefProvider, Akka.Cluster"
              deployment {
                /echodispatcher {
                  router = round-robin-pool # routing strategy
                  nr-of-instances = 1 # max number of total routees
                  cluster {
                     enabled = on
                     allow-local-routees = on
                     use-role = test
                     max-nr-of-instances-per-node = 1
                  }
                }
              }
              serializers {
                akka-pubsub = "Akka.Cluster.Tools.PublishSubscribe.Serialization.DistributedPubSubMessageSerializer, Akka.Cluster.Tools"
                akka-data-replication = "Akka.DistributedData.Serialization.ReplicatorMessageSerializer, Akka.DistributedData"
                akka-replicated-data = "Akka.DistributedData.Serialization.ReplicatedDataSerializer, Akka.DistributedData"
              }
              serialization-bindings {
                "Akka.Cluster.Tools.PublishSubscribe.IDistributedPubSubMessage, Akka.Cluster.Tools" = akka-pubsub
	              "Akka.Cluster.Tools.PublishSubscribe.Internal.SendToOneSubscriber, Akka.Cluster.Tools" = akka-pubsub
                "Akka.DistributedData.IReplicatorMessage, Akka.DistributedData" = akka-data-replication
                "Akka.DistributedData.IReplicatedDataSerialization, Akka.DistributedData" = akka-replicated-data
              }
              serialization-identifiers {
                "Akka.Cluster.Tools.PublishSubscribe.Serialization.DistributedPubSubMessageSerializer, Akka.Cluster.Tools" = 9
  	            "Akka.DistributedData.Serialization.ReplicatedDataSerializer, Akka.DistributedData" = 11
                "Akka.DistributedData.Serialization.ReplicatorMessageSerializer, Akka.DistributedData" = 12
              }
            }
            remote {
              log-remote-lifecycle-events = DEBUG
              dot-netty.tcp {
                hostname = "127.0.0.1"
                port = 0
              }
            }

            cluster {
				seed-nodes = ["akka.tcp://ClusterSystem@surface-seb:2552"]
				auto-down-unreachable-after = 1s

              #auto-down-unreachable-after = 10s
              pub-sub {
                # Actor name of the mediator actor, /system/distributedPubSubMediator
                name = distributedPubSubMediator

                # Start the mediator on members tagged with this role.
                # All members are used if undefined or empty.
                role = ""

                # The routing logic to use for 'Send'
                # Possible values: random, round-robin, broadcast
                routing-logic = random

                # How often the DistributedPubSubMediator should send out gossip information
                gossip-interval = 1s

                # Removed entries are pruned after this duration
                removed-time-to-live = 120s

                # Maximum number of elements to transfer in one message when synchronizing the registries.
                # Next chunk will be transferred in next round of gossip.
                max-delta-elements = 3000
  
                # The id of the dispatcher to use for DistributedPubSubMediator actors. 
                # If not specified default dispatcher is used.
                # If specified you need to define the settings of the actual dispatcher.
                use-dispatcher = ""

              }

              distributed-data {
                # Actor name of the Replicator actor, /system/ddataReplicator
                name = ddataReplicator

                # Replicas are running on members tagged with this role.
                # All members are used if undefined or empty.
                role = ""

                # How often the Replicator should send out gossip information
                gossip-interval = 2 s

                # How often the subscribers will be notified of changes, if any
                notify-subscribers-interval = 500 ms

                # Maximum number of entries to transfer in one gossip message when synchronizing
                # the replicas. Next chunk will be transferred in next round of gossip.
                max-delta-elements = 1000
  
                # The id of the dispatcher to use for Replicator actors. If not specified
                # default dispatcher is used.
                # If specified you need to define the settings of the actual dispatcher.
                use-dispatcher = ""

                # How often the Replicator checks for pruning of data associated with
                # removed cluster nodes.
                pruning-interval = 30 s
  
                # How long time it takes (worst case) to spread the data to all other replica nodes.
                # This is used when initiating and completing the pruning process of data associated
                # with removed cluster nodes. The time measurement is stopped when any replica is 
                # unreachable, so it should be configured to worst case in a healthy cluster.
                max-pruning-dissemination = 60 s
  
                # Serialized Write and Read messages are cached when they are sent to 
                # several nodes. If no further activity they are removed from the cache
                # after this duration.
                serializer-cache-time-to-live = 10s
  
                delta-crdt {

                    # Some complex deltas grow in size for each update and above this
                    # threshold such deltas are discarded and sent as full state instead.
                    max-delta-size = 200  
                }
    
                durable {
                  # List of keys that are durable. Prefix matching is supported by using * at the
                  # end of a key.  
                  keys = []
    
                  # The markers of that pruning has been performed for a removed node are kept for this
                  # time and thereafter removed. If and old data entry that was never pruned is
                  # injected and merged with existing data after this time the value will not be correct.
                  # This would be possible if replica with durable data didn't participate in the pruning
                  # (e.g. it was shutdown) and later started after this time. A durable replica should not 
                  # be stopped for longer time than this duration and if it is joining again after this
                  # duration its data should first be manually removed (from the lmdb directory).
                  # It should be in the magnitude of days. Note that there is a corresponding setting
                  # for non-durable data: 'akka.cluster.distributed-data.pruning-marker-time-to-live'.
                  pruning-marker-time-to-live = 10 d
    
                  # Fully qualified class name of the durable store actor. It must be a subclass
                  # of akka.actor.Actor and handle the protocol defined in 
                  # akka.cluster.ddata.DurableStore. The class must have a constructor with 
                  # com.typesafe.config.Config parameter.
                  store-actor-class = ""
    
                  use-dispatcher = akka.cluster.distributed-data.durable.pinned-store
    
                  pinned-store {
                    executor = thread-pool-executor
                    type = PinnedDispatcher
                  }
    
                }
              }


            }
          }
      ]]>
    </hocon>
  </akka>
  <runtime>
    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
      <dependentAssembly>
        <assemblyIdentity name="System.Diagnostics.DiagnosticSource" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-4.0.1.0" newVersion="4.0.1.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Collections.Immutable" publicKeyToken="b03f5f7f11d50a3a" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-1.2.1.0" newVersion="1.2.1.0" />
      </dependentAssembly>
    </assemblyBinding>
  </runtime>
</configuration>